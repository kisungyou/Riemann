mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2mean(myriem1, myriem2, nperm=9999)
library(Riemann)
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.05))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(stats::rnorm(2, sd=0.05), 1)
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2mean(myriem1, myriem2, nperm=9999)
riem.test2mean(myriem1, myriem2, nperm=9999)
riem.fanova(myriem1, myriem2)
riem.test2mean(myriem1, myriem2, nperm=9999, geometry="extrinsic")
riem.test2mean(myriem1, myriem2, nperm=9999, geometry="extrinsic")
riem.test2mean(myriem1, myriem2, nperm=9999, geometry="extrinsic")
library(Riemann)
library(Riemann)
pkgdown::build_site()
myriem
myriem$data[c(1,3,5)]
library(Riemann)
#-------------------------------------------------------------------
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## MDS FOR VISUALIZATION
embed2 = riem.mds(myriem, ndim=2)$embed
## FIND CORESET OF SIZES 5, 10, 15
core1 = riem.coreset18B(myriem, M=5)
core2 = riem.coreset18B(myriem, M=10)
core3 = riem.coreset18B(myriem, M=15)
core1
core2
core3
## FIND CORESET OF SIZES 3, 6, 9
core1 = riem.coreset18B(myriem, M=3)
core2 = riem.coreset18B(myriem, M=6)
core3 = riem.coreset18B(myriem, M=9)
col1 = rep(1,30); col1[core1$coreid] = 2
col2 = rep(1,30); col2[core2$coreid] = 2
col3 = rep(1,30); col3[core3$coreid] = 2
plot(embed2, pch=19, col=col1, main="coreset size=3")
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(embed2, pch=19, col=col1, main="coreset size=3")
plot(embed2, pch=19, col=col2, main="coreset size=6")
plot(embed2, pch=19, col=col3, main="coreset size=9")
par(opar)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## MDS FOR VISUALIZATION
embed2 = riem.mds(myriem, ndim=2)$embed
## FIND CORESET OF SIZES 3, 6, 9
core1 = riem.coreset18B(myriem, M=3)
core2 = riem.coreset18B(myriem, M=6)
core3 = riem.coreset18B(myriem, M=9)
col1 = rep(1,30); col1[core1$coreid] = 2
col2 = rep(1,30); col2[core2$coreid] = 2
col3 = rep(1,30); col3[core3$coreid] = 2
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(embed2, pch=19, col=col1, main="coreset size=3")
plot(embed2, pch=19, col=col2, main="coreset size=6")
plot(embed2, pch=19, col=col3, main="coreset size=9")
par(opar)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## MDS FOR VISUALIZATION
embed2 = riem.mds(myriem, ndim=2)$embed
## FIND CORESET OF SIZES 3, 6, 9
core1 = riem.coreset18B(myriem, M=3)
core2 = riem.coreset18B(myriem, M=6)
core3 = riem.coreset18B(myriem, M=9)
col1 = rep(1,30); col1[core1$coreid] = 2
col2 = rep(1,30); col2[core2$coreid] = 2
col3 = rep(1,30); col3[core3$coreid] = 2
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(embed2, pch=19, col=col1, main="coreset size=3")
plot(embed2, pch=19, col=col2, main="coreset size=6")
plot(embed2, pch=19, col=col3, main="coreset size=9")
par(opar)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## MDS FOR VISUALIZATION
embed2 = riem.mds(myriem, ndim=2)$embed
## FIND CORESET OF SIZES 3, 6, 9
core1 = riem.coreset18B(myriem, M=3)
core2 = riem.coreset18B(myriem, M=6)
core3 = riem.coreset18B(myriem, M=9)
col1 = rep(1,30); col1[core1$coreid] = 2
col2 = rep(1,30); col2[core2$coreid] = 2
col3 = rep(1,30); col3[core3$coreid] = 2
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(embed2, pch=19, col=col1, main="coreset size=3")
plot(embed2, pch=19, col=col2, main="coreset size=6")
plot(embed2, pch=19, col=col3, main="coreset size=9")
par(opar)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## MDS FOR VISUALIZATION
embed2 = riem.mds(myriem, ndim=2)$embed
## FIND CORESET OF SIZES 3, 6, 9
core1 = riem.coreset18B(myriem, M=3)
core2 = riem.coreset18B(myriem, M=6)
core3 = riem.coreset18B(myriem, M=9)
col1 = rep(1,30); col1[core1$coreid] = 2
col2 = rep(1,30); col2[core2$coreid] = 2
col3 = rep(1,30); col3[core3$coreid] = 2
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(embed2, pch=19, col=col1, main="coreset size=3")
plot(embed2, pch=19, col=col2, main="coreset size=6")
plot(embed2, pch=19, col=col3, main="coreset size=9")
par(opar)
library(Riemann)
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
library(Riemann)
library(Riemann)
library(usmap)
library(maps)
p <- usmap::us_map()
p
help(us_map)
df <- us_map(regions = "counties")
west_coast <- us_map(include = c("CA", "OR", "WA"))
df
west_coast
rm(list=ls())
mainpart <- usmap::us_map()
mainpart <- usmap::us_map()
p <- ggplot() + geom_polygon(data=mainpart)
p <- ggplot2::ggplot() + geom_polygon(data=mainpart)
library(ggplot2)
p <- ggplot2::ggplot() + geom_polygon(data=mainpart)
p
plot_usmap(regions="states")
data("cities")
cities
mygeo = data.frame(lon=cities$coord[,2], lat=cities$coord[,1])
data("earthquakes")
head(earthquakes)
mygeo = usmap_transform(data.frame(lon=cities$coord[,2], lat=cities$coord[,1]))
mygeo
plot_usmap(regions="states") +
geom_point(data=mygeo, aes(x=lon.1, y=lat.1))
plot_usmap(regions="states") +
geom_point(data=mygeo, aes(x=lon.1, y=lat.1), alpha=0.25)
myriem = riem.sphere(cities$cartesian)
rm(list=ls())
library(Riemann)
library(Riemann)
??use_vignette
usethis::use_vignette("Riemann-101", "Riemann 101 : A First Step")
usethis::use_package("usmap", type="Suggests")
usethis::use_package("ggplot2", type="Suggests")
help(cities)
cities$population
data(cities)
cities$population
help(riem.mean())
help(riem.mean)
library(Riemann)
intmean = as.vector(riem.mean(myriem)$mean) # vectorization for convenience
help("sphere.xyz2geo")
myriem = wrap.sphere(cities$cartesian)
intmean = as.vector(riem.mean(myriem)$mean) # vectorization for convenience
geomean = sphere.xyz2geo(intmean)           # (lat, lon) will be returned
geomean
eucmean = base::colMeans(cities$coord)
eucmean
as.double(eucmean)
# (EXTRA)
# Compute Euclidean average of Geographic Coordinates.
eucmean = as.double(base::colMeans(cities$coord))
viseuc = usmap_transform(data.frame(lat=eucmean[1], lon=eucmean[2]))
eucmean
geomean
# (EXTRA)
# Compute Euclidean average of Geographic Coordinates.
eucmean = as.double(base::colMeans(cities$coord))
# Merge two means
twomean = rbind(geomean, eucmean)
vismean = usmap_transform(data.frame(lat=twomean[,1], lon=twomean[,2], col=c("red","blue")))
twomean
cities$coord
cities$coord$longitude
??usmap_transform
vismean = usmap_transform(data.frame(lat=twomean[,1], lon=twomean[,2]))
vismean = usmap_transform(data.frame(lon=twomean[,2], lat=twomean[,1], col=c("red","blue")))
# visualize
mycities = usmap_transform(data.frame(lon=cities$coord[,2], lat=cities$coord[,1]))
myplot <- plot_usmap(regions="states") +
geom_point(data=mycities, aes(x=lon.1, y=lat.1), alpha=.5) +
geom_piont(data=vismean, aes(x=lon.1, y=lat.1, col=col))
myplot <- plot_usmap(regions="states") +
geom_point(data=mycities, aes(x=lon.1, y=lat.1), alpha=.5) +
geom_point(data=vismean, aes(x=lon.1, y=lat.1, col=col))
myplot
rm(list=ls())
??plot_usmap
cities
cities
data(cities)
cities$names
??geom_label_repel
library(Riemann)
rm(list=ls())
pkgdown::build_articles()
pkgdown::build_site()
options(rmarkdown.html_vignette.check_title = FALSE)
library(Riemann)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
pkgdown::build_site()
library(Riemann)
usethis::use_package("maptools", type="Suggests")
library(Riemann)
pkgdown::build_site()
rm(list=ls())
library(Riemann)
pkgdown::build_site()
library(Riemann)
pkgdown::build_site()
pkgdown::build_articles()
pkgdown::build_articles_index()
??build_articles_index
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
library(Riemann)
pkgdown::build_site()
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
vecx  = seq(from=-0.9, to=0.9, length.out=50)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.5)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy, 1)
mat1 = cbind(vecx, vecy1, 1)
mat1
riem.curvedist(rcurve1, rcurve2, vect=vecx)
rcurve1 = riem.sphere(mat1)
rcurve2 = riem.sphere(mat2)
rcurve3 = riem.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
library(Riemann)
vecx  = seq(from=-0.9, to=0.9, length.out=50)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.5)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy1, 1); mat1 = mat1/sqrt(rowSums(mat1^2))
mat2 = cbind(vecx, vecy2, 1); mat2 = mat2/sqrt(rowSums(mat2^2))
mat3 = cbind(vecx, vecy3, 1); mat3 = mat3/sqrt(rowSums(mat3^2))
rcurve1 = wrap.sphere(mat1)
rcurve2 = wrap.sphere(mat2)
rcurve3 = wrap.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
library(Riemann)
## GENERATION
vecx  = seq(from=-0.9, to=0.9, length.out=50)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.5)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy1, 1); mat1 = mat1/sqrt(rowSums(mat1^2))
mat2 = cbind(vecx, vecy2, 1); mat2 = mat2/sqrt(rowSums(mat2^2))
mat3 = cbind(vecx, vecy3, 1); mat3 = mat3/sqrt(rowSums(mat3^2))
rcurve1 = wrap.sphere(mat1)
rcurve2 = wrap.sphere(mat2)
rcurve3 = wrap.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
library(Riemann)
#-------------------------------------------------------------------
## GENERATION
vecx  = seq(from=-0.9, to=0.9, length.out=50)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.5)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy1, 1); mat1 = mat1/sqrt(rowSums(mat1^2))
mat2 = cbind(vecx, vecy2, 1); mat2 = mat2/sqrt(rowSums(mat2^2))
mat3 = cbind(vecx, vecy3, 1); mat3 = mat3/sqrt(rowSums(mat3^2))
rcurve1 = wrap.sphere(mat1)
rcurve2 = wrap.sphere(mat2)
rcurve3 = wrap.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
library(Riemann)
#-------------------------------------------------------------------
## GENERATION
vecx  = seq(from=-0.9, to=0.9, length.out=50)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.5)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.5)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy1, 1); mat1 = mat1/sqrt(rowSums(mat1^2))
mat2 = cbind(vecx, vecy2, 1); mat2 = mat2/sqrt(rowSums(mat2^2))
mat3 = cbind(vecx, vecy3, 1); mat3 = mat3/sqrt(rowSums(mat3^2))
rcurve1 = wrap.sphere(mat1)
rcurve2 = wrap.sphere(mat2)
rcurve3 = wrap.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
vecx  = seq(from=-0.9, to=0.9, length.out=50)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.1)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.1)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.1)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy1, 1); mat1 = mat1/sqrt(rowSums(mat1^2))
mat2 = cbind(vecx, vecy2, 1); mat2 = mat2/sqrt(rowSums(mat2^2))
mat3 = cbind(vecx, vecy3, 1); mat3 = mat3/sqrt(rowSums(mat3^2))
rcurve1 = wrap.sphere(mat1)
rcurve2 = wrap.sphere(mat2)
rcurve3 = wrap.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
vecy1 = 0.5*cos(vecx) + rnorm(50, sd=0.05)
vecy2 = 0.5*cos(vecx) + rnorm(50, sd=0.05)
vecy3 = 0.5*sin(vecx) + rnorm(50, sd=0.05)
## WRAP AS RIEMOBJ
mat1 = cbind(vecx, vecy1, 1); mat1 = mat1/sqrt(rowSums(mat1^2))
mat2 = cbind(vecx, vecy2, 1); mat2 = mat2/sqrt(rowSums(mat2^2))
mat3 = cbind(vecx, vecy3, 1); mat3 = mat3/sqrt(rowSums(mat3^2))
rcurve1 = wrap.sphere(mat1)
rcurve2 = wrap.sphere(mat2)
rcurve3 = wrap.sphere(mat3)
## COMPUTE DISTANCES
riem.curvedist(rcurve1, rcurve2, vect=vecx)
riem.curvedist(rcurve1, rcurve2, vect=vecx)
riem.curvedist(rcurve1, rcurve3, vect=vecx)
rm(list=ls())
library(Riemann)
library(Riemann)
pack <- "Riemann"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
rm(list=ls())
library(Riemann)
pkgdown::build_site()
library(Riemann)
help(fd)
install.packages("funFEM")
library(funFEM)
help("funFEM")
basis <- create.bspline.basis(c(0, 365), nbasis=21, norder=4)
basis
fdobj <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"],basis,
fdnames=list("Day", "Station", "Deg C"))$fd
fdobj
fdobj$coefs
day.5
fdobj
class(fdobj)
help("smooth.basis")
dat.y
dat.5
dat.y
dat.5
day.5
dim(CanadianWeather)
dim(CanadianWeather$dailyAv)
CanadianWeather$dailyAv[,,1]
CanadianWeather$dailyAv[,,2]
CanadianWeather$dailyAv[,,3]
names(CanadianWeather$dailyAv)
fdobj <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"],basis,
fdnames=list("Day", "Station", "Deg C"))$fd
X = CanadianWeather$dailyAv[,,"Temperature.C"]
dim(X)
X
head(CanadianWeather$dailyAv[,,1])
head(CanadianWeather$dailyAv[,,2])
fdobj$basis
data1 <- CanadianWeather$dailyAv[,,"Temperature.C"]
dim(data1)
fdobj$basis$rangeval
data2 <- eval.fd(0:365, fdobj)
data2
dim(data2)
par(mfrow=c(1,2))
plot(data1,"b")
plot(data2,"b")
data1
data1 <- CanadianWeather$dailyAv[,1,"Temperature.C"]
data2 <- eval.fd(0:365, fdobj)[,1]
par(mfrow=c(1,2))
plot(data1,"b")
data1
plot(data1)
plot(data2)
fdobj <- smooth.basis(day.5, as.vector(CanadianWeather$dailyAv[,1,"Temperature.C"]),basis)$fd
fdobj
fdobj$coefs
fdobj$fdnames
fdobj$basis
fdobj$basis$rangeval
fdobj
fdobj$basis
rm(list=ls())
install.packages("funData")
basis <- create.bspline.basis(c(0, 365), nbasis=21, norder=4)
fdobj <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"],basis,
fdnames=list("Day", "Station", "Deg C"))$fd
funData::ggplot(fdobj)
library(Riemann)
