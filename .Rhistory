library(Riemann)
data("gorilla")
riemobj = wrap.landmark(gorilla$male)
means = riem.mean(riemobj, geometry="intrinsic")
means$mean
length(riemobj$data)
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=2, col="red")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=2, col="red")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
graphics.off()
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
means = riem.mean(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$mean, lwd=5, col="red")
data("gorilla")
riemobj = wrap.landmark(gorilla$male)
means = riem.median(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$median, lwd=5, col="red")
data("gorilla")
riemobj = wrap.landmark(gorilla$male)
means = riem.median(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$median, lwd=5, col="red")
data("gorilla")
riemobj = wrap.landmark(gorilla$male)
means = riem.median(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$median, lwd=5, col="red")
data("gorilla")
riemobj = wrap.landmark(gorilla$male)
means = riem.median(riemobj, geometry="extrinsic")
for (i in 1:29){
if (i < 2){
plot(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
} else {
points(riemobj$data[[i]], cex=0.5);  lines(riemobj$data[[i]])
}
}
lines(means$median, lwd=5, col="red")
rm(list=ls())
library(Riemann)
rm(list=ls())
library(Riemann)
help(riemdist)
data("gorilla")
riemdist(gorilla$male[,,1], gorilla$male[,,2])
riemobj = wrap.landmark(gorilla$male[,,1:4])
riem.pdist(riemobj, geometry="intrinsic")[1,2]
riem.pdist(riemobj, geometry="extrinsic")[1,2]
riem1 = wrap.landmark(gorilla$male)
riem2 = wrap.landmark(gorilla$female)
riem.test2wass(riem1, riem2)
library(Riemann)
riem.test2wass(riem1, riem2)
riem.fanova(riem1, riem2)
riem.fanovaP(riem1, riem2)
riem.fanovaP(riem1, riem2,nperm = 10000)
rm(list=ls())
library(Riemann)
library(Riemann)
library(Riemann)
pkgdown::build_site()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_reference()
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2, ylim=xlim)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2, ylim=c(-1,1)/2)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5, xlim=c(-1,1)/2, ylim=c(-2,2)/5)
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5,
xlim=c(-1,1)/2, ylim=c(-2,2)/5,
main="female gorilla skull preshapes")
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5,
xlim=c(-1,1)/2, ylim=c(-2,2)/5,
main="female gorilla skull preshapes")
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5,
xlim=c(-1,1)/2, ylim=c(-2,2)/5,
main="female gorilla skull preshapes")
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5,
xlim=c(-1,1)/2, ylim=c(-2,2)/5,
main="female gorilla skull preshapes")
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
rm(list=ls())
library(Riemann)
pkgdown::build_site()
data(gorilla)                               # load the data
riem.female = wrap.landmark(gorilla$female) # wrap as RIEMOBJ
opar <- par(no.readonly=TRUE)
for (i in 1:30){
if (i < 2){
plot(riem.female$data[[i]], cex=0.5,
xlim=c(-1,1)/2, ylim=c(-2,2)/5,
main="female gorilla skull preshapes",
xlab="dimension 1", ylab="dimension 2")
lines(riem.female$data[[i]])
} else {
points(riem.female$data[[i]], cex=0.5)
lines(riem.female$data[[i]])
}
}
par(opar)
library(Riemann)
library(Riemann)
pkgdown::build_site()
# Initialize
rm(list=ls())
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data : Two Data are Same
data <- as.data.frame(readr::read_delim("procrustes.txt", "\t", escape_double = FALSE, trim_ws =TRUE))
data3d = array(0, c(15,2,10))
for (i in 1:10){
dat.numeric = as.vector(data[i,6:ncol(data)])
dat.matrix  = (matrix(dat.numeric, ncol=2, byrow=TRUE))
data3d[,,i] = dat.matrix
}
dat.numeric
dat.numeric = as.double(as.vector(data[i,6:ncol(data)]))
dat.numeric
data3d = array(0, c(15,2,10))
for (i in 1:10){
dat.numeric = as.double(as.vector(data[i,6:ncol(data)]))
dat.matrix  = (matrix(dat.numeric, ncol=2, byrow=TRUE))
data3d[,,i] = dat.matrix
}
# Initialize
rm(list=ls())
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data : Two Data are Same
data <- as.data.frame(readr::read_delim("procrustes.txt", "\t", escape_double = FALSE, trim_ws =TRUE))
data3d = array(0, c(15,2,nrow(data)))
for (i in 1:nrow(data)){
dat.numeric = as.double(as.vector(data[i,6:ncol(data)]))
dat.matrix  = (matrix(dat.numeric, ncol=2, byrow=TRUE))
data3d[,,i] = dat.matrix
}
data.species <- as.factor(data$species)
data.class   <- rep(0,nrow(data))
# Manual Reassign
classA = c("coriacea","misera")
classB = c("biflora","capsularis","micropetala",
"organensis","pohlii","rubra","tricuspis")
classC = c("caerulea","cincinnata","edmundoi",
"gibertii","hatschbachii","kermesina","mollissima","setacea","suberosa","tenuifila")
classD = c("amethystina","foetida","gracilis","morifolia")
classE = c("actinia","miersii","sidifolia","triloba")
classF = c("alata","edulis","ligularis","nitida","racemosa","villosa")
classG = c("coccinea","cristalina","galbana","malacophylla","maliformis","miniata","mucronata")
for (i in 1:nrow(data)){
tgt = data.species[i]
if (tgt %in% classA){
data.class[i] = "A"
} else if (tgt %in% classB){
data.class[i] = "B"
} else if (tgt %in% classC){
data.class[i] = "C"
} else if (tgt %in% classD){
data.class[i] = "D"
} else if (tgt %in% classE){
data.class[i] = "E"
} else if (tgt %in% classF){
data.class[i] = "F"
} else if (tgt %in% classG){
data.class[i] = "G"
}
}
data.class = as.factor(data.class)
passiflora = list(data=data3d, species=data.species, class=data.class)
save("passiflora",file="passiflora.RData")
getwd()
