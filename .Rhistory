for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2wass(myriem1, myriem2, nperm=999)
library(Riemann)
riem.test2wass(myriem1, myriem2, nperm=999)
riem.test2wass(myriem1, myriem2, nperm=999, use.smooth=FALSE)
library(Riemann)
riem.test2wass(myriem1, myriem2, nperm=999, use.smooth=FALSE)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "ch")$'ch'
}
plot(vec_x, vec_y, "b")
library(Riemann)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
library(Riemann)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
library(Riemann)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "dunn")$'dunn'
}
plot(vec_x, vec_y, "b")
library(Riemann)
cluster::silhouette()
??silhouette
library(Riemann)
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "sil")$'sil'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "sil")$'sil'
}
plot(vec_x, vec_y, "b")
## GENERATE DATA
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "sil")$'sil'
}
plot(vec_x, vec_y, "b")
rm(list=ls())
x = list()
for  (i in 1:10){x[[i]] = rnorm(i)}
x[c(1,3,5)]
x[1]
library(Riemann)
X = matrix(1:9, nrow=3)
upper.tri(X)
library(Riemann)
library(Riemann)
library(Riemann)
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "gd31")$'gd31'
}
plot(vec_x, vec_y, "b")
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
#
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "gd31")$'gd31'
}
plot(vec_x, vec_y, "b")
mydata = list()
for (i in 1:10){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 11:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 21:30){
tgt = c(stats::rnorm(2, sd=0.1), 1)
mydata[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem = wrap.sphere(mydata)
#
## K-MEANS++ WITH K=2,3,4
vec_x = 2:11
vec_y = rep(0,10)
for (i in 1:10){
cli = riem.kmedoids(myriem, k=(i+1))$cluster
vec_y[i] = riem.critint(myriem, cli, criteria = "gd31")$'gd31'
}
plot(vec_x, vec_y, "b")
rm(list=ls())
graphics.off()
library(Riemann)
library(Riemann)
help("riem.critint")
library(Riemann)
library(Riemann)
pkgdown::build_site()
#-------------------------------------------------------------------
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2wass(myriem1, myriem2, nperm=999, use.smooth=FALSE)
library(Riemann)
library(Riemann)
usethis::use_package("ggrepel")
library(Riemann)
pkgdown::build_site()
library(Riemann)
library(Riemann)
pkgdown::build_site()
library(Riemann)
