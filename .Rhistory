set.seed(496)
npts = 100
nlev = 0.25
thetas = seq(from=0, to=pi/2, length.out=npts)
Xstack = cbind(rep(0,npts), sin(thetas), cos(thetas))
Xriem  = wrap.sphere(Xstack)
ytrue  = sin(seq(from=0, to=2*pi, length.out=npts))
ynoise = ytrue + rnorm(npts, sd=nlev)
# FIT WITH 5-FOLD CV
cv_band = (10^seq(from=-4, to=-1, length.out=200))
cv_fit  = riem.m2skregCV(Xriem, ynoise, bandwidths=cv_band)
cv_err  = cv_fit$errors
# VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
plot(1:npts, cv_fit$ypred, pch=19, cex=0.5, "b", xlab="", main="optimal prediction")
lines(1:npts, ytrue, col="red", lwd=1.5)
plot(cv_err[,1], cv_err[,2], "b", pch=19, cex=0.5, main="5-fold CV errors",
xlab="bandwidth", ylab="SSE")
abline(v=cv_fit$bandwidth, col="blue", lwd=1.5)
par(opar)
rm(list=ls())
library(Riemann)
pkgdown::build_site()
library(Riemann)
??gmf
??gfm
pkgdown::build_home()
library(Riemann)
(44.27-100)/(100*log(2))
417/58.6
2.25/0.768
help(DEoptim.control)
help(optimize)
library(Riemann)
library(Riemann)
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(0,1,0,), 20),
rspnorm(50, c(0,0,1), 20))
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(0,1,0), 20),
rspnorm(50, c(0,0,1), 20))
mixspnorm(xx, k=2)$criteria
mixspnorm(xx, k=3)$criteria
mixspnorm(xx, k=4)$criteria
new.loglkd = spmix.loglkd(new.d2mat, new.lambda, new.pi, myp)
A = matrix(rnorm(10), nrow=5)
A = matrix(rnorm(10), nrow=5)
rowSums(A)
devtools::document()
devtools::document()
library(Riemann)
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(0,1,0), 20),
rspnorm(50, c(0,0,1), 20))
mixspnorm(xx, k=2)$criteria
mixspnorm(xx, k=3)$criteria
mixspnorm(xx, k=4)$criteria
mixspnorm(xx, k=5)$criteria
help(mixspnorm)
mixspnorm(xx, k=2, printer=TRUE)
mixspnorm(xx, k=2, printer=TRUE)$criteria
mixspnorm(xx, k=3, printer=TRUE)$criteria
mixspnorm(xx, k=4, printer=TRUE)$criteria
mixspnorm(xx, k=5, printer=TRUE)$criteria
mixspnorm(xx, k=6, printer=TRUE)$criteria
mixspnorm(xx, k=7, printer=TRUE)$criteria
mixspnorm(xx, k=2)
mixspnorm(xx, k=2)$parameter
mixspnorm(xx, k=3)$parameter
mixspnorm(xx, k=4)$parameter
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(0,1,0), 20),
rspnorm(50, c(0,0,1), 20))
cc = rbind(mixspnorm(xx, k=2)$criteria,
mixspnorm(xx, k=3)$criteria,
mixspnorm(xx, k=4)$criteria,
mixspnorm(xx, k=5)$criteria)
cc
matplot(cc)
matplot(cc, type="b")
zz = mixspnorm(xx, k=2)
zz$loglkd
c(mixspnorm(xx, k=2)$loglkd,
mixspnorm(xx, k=3)$loglkd,
mixspnorm(xx, k=4)$loglkd,
mixspnorm(xx, k=5)$loglkd)
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(-1/sqrt(2),1/sqrt(2),0), 20),
rspnorm(50, c(0,0,-1), 20))
cc = rbind(mixspnorm(xx, k=2)$criteria,
mixspnorm(xx, k=3)$criteria,
mixspnorm(xx, k=4)$criteria,
mixspnorm(xx, k=5)$criteria)
c(mixspnorm(xx, k=2)$loglkd,
mixspnorm(xx, k=3)$loglkd,
mixspnorm(xx, k=4)$loglkd,
mixspnorm(xx, k=5)$loglkd)
library(Riemann)
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(-1/sqrt(2),1/sqrt(2),0), 20),
rspnorm(50, c(0,0,-1), 20))
cc = rbind(mixspnorm(xx, k=2)$criteria,
mixspnorm(xx, k=3)$criteria,
mixspnorm(xx, k=4)$criteria,
mixspnorm(xx, k=5)$criteria)
matplot(cc)
cc = rbind(mixspnorm(xx, k=2)$criteria,
mixspnorm(xx, k=3)$criteria,
mixspnorm(xx, k=4)$criteria,
mixspnorm(xx, k=5)$criteria,
mixspnorm(xx, k=6)$criteria,
mixspnorm(xx, k=7)$criteria)
help(matplot)
matplot(2:7, cc, type="b")
library(Riemann)
xx = c(rspnorm(50, c(1,0,0), 20),
rspnorm(50, c(-1/sqrt(2),1/sqrt(2),0), 20),
rspnorm(50, c(0,0,-1), 20))
cc = rbind(mixspnorm(xx, k=2)$criteria,
mixspnorm(xx, k=3)$criteria,
mixspnorm(xx, k=4)$criteria,
mixspnorm(xx, k=5)$criteria,
mixspnorm(xx, k=6)$criteria,
mixspnorm(xx, k=7)$criteria)
matplot(2:7, cc, type="b")
rm(list=ls())
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
install.packages(c("CVXR","Rdpack","RiemBase","Rdimtools","T4cluster","DEoptim","lpSolve","maotai","ggrepel"), dependencies = TRUE)
library(Riemann)
pkgdown::build_site()
install.packages("maptools")
library(Riemann)
library(Riemann)
pkgdown::build_site()
install.packages("rgdal")
install.packages(c("knitr","rmarkdown","rgdal","usmap","maptools","ggplot2"), dependencies = TRUE)
install.packages(c("knitr", "rmarkdown", "rgdal", "usmap", "maptools", "ggplot2"), dependencies = TRUE)
library(Riemann)
library(Riemann)
pkgdown::build_site()
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
p=2
t1 = 2*(pi^(p/2))/(gamma(p/2))
t1
sigma = 1
p=2
# define a function
myfunc <- function(r){
return(exp(-r/sigma)*(sin(r)^(p-1)))
}
# compute
t1 = 2*(pi^(p/2))/(gamma(p/2))
t2 = stats::integrate(myfunc, lower=0, upper=pi, rel.tol=sqrt(.Machine$double.eps))$value
t1
t2
rm(list=ls())
library(Riemann)
rspnorm(1, c(0,0,1), 10)
rspnorm(2, c(0,0,1), 10)
library(Riemann)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
rspnorm.single.tester(c(1,0,0,0), 10)
zz = rspnorm.single.tester(c(1,0,0,0), 10)
sum(rspnorm.single.tester(c(1,0,0,0), 10)^2)
sum(rspnorm.single.tester(c(1,0,0,0), 10)^2)
sum(rspnorm.single.tester(c(1,0,0,0), 10)^2)
sum(rspnorm.single.tester(c(1,0,0,0), 10)^2)
sum(rspnorm.single.tester(c(1,0,0,0), 10)^2)
library(Riemann)
library(Riemann)
library(Riemann)
sum(rspnorm.single.tester(c(1,0,0,0), 10)^2)
rspnorm(10, c(0,1), 2)
rspnorm(10, c(0,1), 2)
rspnorm(10, c(0,1), 2)
rspnorm(10, c(0,1), 2)
rspnorm(10, c(0,1), 100)
rspnorm(10, c(0,1), 1000)
rspnorm(10, c(0,1), 10000)
rspnorm(10, c(0,1), 10000)
rspnorm(10, c(0,1), 10000)
rspnorm(10, c(0,1), 10000)
rspnorm(1, c(0,1), 10)
rspnorm(1, c(0,1), 1000000)
rspnorm(1, c(0,1), 1000000)[[1]]
y = rspnorm(1, c(0,1), 1000000)[[1]]
sum(y^2)
y
#' @keywords internal
#' @noRd
rsplaplace.dist <- function(x, y){
if (sqrt(sum((x-y)^2)) < 100*.Machine$double.eps){
return(0)
} else {
return(base::acos(base::sum(x*y)))
}
}
x = rnorm(5)
y = rnorm(5)
x = x/sqrt(sum(x^2))
y = y/sqrt(sum(y^2))
z = x
sqrt(sum(x-y)^2)
rsplaplace.dist(x,y)
rsplaplace.dist(x,z)
rsplaplace.dist(y,z)
.Machine$double.xmax
n = 10
vector("list", length=n)
library(Riemann)
rm(list=ls())
library(Riemann)
rsplaplace(50, c(0,1), sigma=0.01)
rsplaplace(50, c(0,1), sigma=1)
rsplaplace(50, c(0,1), sigma=0.1)
rsplaplace(10, c(0,1), sigma=0.5)
matrix(unlist(rsplaplace(10, c(0,1), sigma=0.5)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(10, c(0,1), sigma=0.5)), ncol=2, byrow = TRUE)
mat2 = matrix(unlist(rsplaplace(10, c(0,1), sigma=1)), ncol=2, byrow = TRUE)
mat3 = matrix(unlist(rsplaplace(10, c(0,1), sigma=5)), ncol=2, byrow = TRUE)
par(mfrow=c(1,3))
plot(mat1, main="sigma=0.5")
plot(mat2, main="sigma=0.5")
plot(mat3, main="sigma=0.5")
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.5)), ncol=2, byrow = TRUE)
mat2 = matrix(unlist(rsplaplace(50, c(0,1), sigma=1)), ncol=2, byrow = TRUE)
mat3 = matrix(unlist(rsplaplace(50, c(0,1), sigma=5)), ncol=2, byrow = TRUE)
par(mfrow=c(1,3))
plot(mat1, main="sigma=0.5", xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat2, main="sigma=1",   xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat3, main="sigma=5",   xlim = c(-1,1), ylim=c(-1,1), pch=19)
library(Riemann)
library(Riemann)
mat3 = matrix(unlist(rsplaplace(50, c(0,1), sigma=5)), ncol=2, byrow = TRUE)
mat2 = matrix(unlist(rsplaplace(50, c(0,1), sigma=1)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.5)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.4)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.3)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.1)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.3)), ncol=2, byrow = TRUE)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.2)), ncol=2, byrow = TRUE)
plot(mat1, main="sigma=0.2", xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat2, main="sigma=1",   xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat3, main="sigma=5",   xlim = c(-1,1), ylim=c(-1,1), pch=19)
1e+4
2e+4
rm(list=ls())
graphics.off()
library(Riemann)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.01)), ncol=2, byrow = TRUE)
mat2 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.1)), ncol=2, byrow = TRUE)
mat3 = matrix(unlist(rsplaplace(50, c(0,1), sigma=1)), ncol=2, byrow = TRUE)
par(mfrow=c(1,3))
plot(mat1, main="sigma=0.01", xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat2, main="sigma=0.1",  xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat3, main="sigma=1",    xlim = c(-1,1), ylim=c(-1,1), pch=19)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
install.packages(c("backports", "bbotk", "broom", "Cairo", "DBI", "dbscan", "DEoptimR", "fansi", "gert", "glue", "htmlTable", "httpuv", "igraph", "jsonlite", "knitr", "ks", "mapproj", "mclust", "mlr3", "mlr3measures", "mlr3misc", "multcomp", "openssl", "parallelly", "pkgbuild", "pkgdown", "progressr", "raster", "Rcpp", "RcppArmadillo", "reticulate", "rgdal", "rgeos", "RMySQL", "rticles", "sf", "slam", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "targets", "terra", "tinytex", "tufte", "wk", "xfun"))
x = abs(sin(rnorm(100)))
y = abs(sin(rnorm(100)))
z = log(x/y)
hist(z)
graphics.off()
zz = exp(mean(zz))
zz = exp(mean(z))
zz
hist(log(y)-log(zz))
z
hist(log(y)-log(z))
z
rm(list=ls())
library(Riemann)
library(Riemann)
exit
q()
install.packages("hydra")
library(hydra)
data(karate)
help(hydra)
embedding <- hydra(karate$distance)
plot(embedding,labels=karate$label,lab.col=karate$group,graph.adj=karate$adjacency)
warnings()
warnings()
plot(embedding,labels=karate$label,lab.col=karate$group,graph.adj=karate$adjacency)
install.packages("phateR")
library(Riemann)
## IN-CODE TEST
true.mu  = c(1,0,0,0,0)
true.lbd = 0.1
## GENERATE DATA N=1000
small.data = rspnorm(1000, true.mu, true.lbd)
## COMPARE FOUR METHODS
test1 = mle.splaplace(small.data, method="Optimize")
test2 = mle.splaplace(small.data, method="DE")
test3 = mle.splaplace(small.data, method="Newton", use.exact=FALSE)
test4 = mle.splaplace(small.data, method="Newton", use.exact=TRUE)
test3
test4
test3
test4
## IN-CODE TEST
true.mu  = c(1,0,0,0,0)
true.lbd = 0.01
## GENERATE DATA N=1000
small.data = rspnorm(1000, true.mu, true.lbd)
## COMPARE FOUR METHODS
test1 = mle.splaplace(small.data, method="Optimize")
test2 = mle.splaplace(small.data, method="DE")
test3 = mle.splaplace(small.data, method="Newton", use.exact=FALSE)
test4 = mle.splaplace(small.data, method="Newton", use.exact=TRUE)
test1
test2
test3
test4
rm(list=ls())
library(Riemann)
vecr = rep(0.1, 10)
sum(vecr*log(vecr))
veck = rep(0.2, 5)
-sum(veck*log(veck))
-sum(veck*log(veck))*2
vec_r = rep(0.1, 10)
fun_split <- function(data, s){
data1 = data[1:s]
data2 = data[(s+1):length(data)]
data1 = data1/sum(data1)
data2 = data2/sum(data2)
term1 = -sum(data1*log(data1))
term2 = -sum(data2*log(data2))
w1 = s/length(data)
w2 = 1-w1
return(w1*term1 + w2*term2)
}
vec_r = rep(0.1, 10)
fun_split <- function(data, s){
data1 = data[1:s]
data2 = data[(s+1):length(data)]
data1 = data1/sum(data1)
data2 = data2/sum(data2)
term1 = -sum(data1*log(data1))
term2 = -sum(data2*log(data2))
w1 = s/length(data)
w2 = 1-w1
return(w1*term1 + w2*term2)
}
vec_seps = 1:9
vec_vals = rep(0, 9)
for (i in 1:9){
vec_vals[i] = fun_split(vec_r, i)
}
plot(vec_seps, vec_vals, "b")
abline(h=-sum(vec_r * sum(vec_r)), col="red")
-sum(vec_r * sum(vec_r))
-sum(vec_r * log(vec_r))
abline(h=-sum(vec_r *log(vec_r)), col="red")
vec_r = rep(0.1, 10)
fun_split <- function(data, s){
data1 = data[1:s]
data2 = data[(s+1):length(data)]
data1 = data1/sum(data1)
data2 = data2/sum(data2)
term1 = -sum(data1*log(data1))
term2 = -sum(data2*log(data2))
w1 = s/length(data)
w2 = 1-w1
return(w1*term1 + w2*term2)
}
vec_seps = 1:9
vec_vals = rep(0, 9)
for (i in 1:9){
vec_vals[i] = fun_split(vec_r, i)
}
plot(vec_seps, vec_vals, "b", ylim=c(0,4))
abline(h=-sum(vec_r *log(vec_r)), col="red")
plot(vec_seps, vec_vals, "b", ylim=c(1,3))
abline(h=-sum(vec_r *log(vec_r)), col="red")
library(Riemann)
library(Riemann)
library(Riemann)
install.packages("usmap")
library(Riemann)
library(Riemann)
#                 FITTING THE MODEL
# ---------------------------------------------------- #
# Load the 'city' data and wrap as 'riemobj'
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
# Fit the model with different numbers of clusters
k2 = moSL(locations, k=2)
k3 = moSL(locations, k=3)
k4 = moSL(locations, k=4)
# Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster, pch=19, main="K=2")
plot(embed2, col=k3$cluster, pch=19, main="K=3")
plot(embed2, col=k4$cluster, pch=19, main="K=4")
par(opar)
# ---------------------------------------------------- #
#                   USE S3 METHODS
# ---------------------------------------------------- #
# Use the same 'locations' data as new data
# (1) log-likelihood
newloglkd = round(loglkd(k3, locations), 3)
print(paste0("Log-likelihood for K=3 model fit : ", newloglkd))
# (2) label
newlabel = label(k3, locations)
# (3) density
newdensity = density(k3, locations)
k3$criteria
k3$loglkd
k3
library(Riemann)
library(Riemann)
newloglkd = round(loglkd(k3, locations), 3)
print(paste0("Log-likelihood for K=3 model fit : ", newloglkd))
# (2) label
newlabel = label(k3, locations)
# (3) density
newdensity = density(k3, locations)
newlabel-k3$cluster
newdensity
rm(list=ls())
library(Riemann)
library(Riemann)
library(Riemann)
install.packages("dtw")
library(Riemann)
devtools::load_all(".")
covr::codecov()
warnings()
library(Riemann)
covr::codecov()
warnings()
usethis::use_testthat()
use_test("wrappers")
usethis::use_test("wrappers")
data_sphere = array(0,c(5,3))
for (i in 1:5){
tgt = stats::rnorm(3)
data_sphere[i,] = tgt/sqrt(sum(tgt^2))
}
riem01 = Riemann::wrap.sphere(data_sphere)
class(riem01)
expect_equal(class(riem03), "riemdata")
## 12landmark
zz = data("gorilla", package="Riemann")
zz
data("gorilla", package="Riemann")
riem12 = Riemann::wrap.landmark(gorilla)
zz$rm(list=ls())
library(Riemann)
covr::package_coverage()
covr::package_coverage()
library(Riemann)
covr::codecov()
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
help(rnorm)
help(rspnorm)
library(Riemann)
rsplaplace(10, c(0,0,1), 0.5)
rsplaplace(10, c(0,0,1), 0.5)
rsplaplace(10, c(0,0,1), 0.5)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
