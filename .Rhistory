graphics.off()
library(Riemann)
mat1 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.01)), ncol=2, byrow = TRUE)
mat2 = matrix(unlist(rsplaplace(50, c(0,1), sigma=0.1)), ncol=2, byrow = TRUE)
mat3 = matrix(unlist(rsplaplace(50, c(0,1), sigma=1)), ncol=2, byrow = TRUE)
par(mfrow=c(1,3))
plot(mat1, main="sigma=0.01", xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat2, main="sigma=0.1",  xlim = c(-1,1), ylim=c(-1,1), pch=19)
plot(mat3, main="sigma=1",    xlim = c(-1,1), ylim=c(-1,1), pch=19)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
install.packages(c("backports", "bbotk", "broom", "Cairo", "DBI", "dbscan", "DEoptimR", "fansi", "gert", "glue", "htmlTable", "httpuv", "igraph", "jsonlite", "knitr", "ks", "mapproj", "mclust", "mlr3", "mlr3measures", "mlr3misc", "multcomp", "openssl", "parallelly", "pkgbuild", "pkgdown", "progressr", "raster", "Rcpp", "RcppArmadillo", "reticulate", "rgdal", "rgeos", "RMySQL", "rticles", "sf", "slam", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "targets", "terra", "tinytex", "tufte", "wk", "xfun"))
x = abs(sin(rnorm(100)))
y = abs(sin(rnorm(100)))
z = log(x/y)
hist(z)
graphics.off()
zz = exp(mean(zz))
zz = exp(mean(z))
zz
hist(log(y)-log(zz))
z
hist(log(y)-log(z))
z
rm(list=ls())
library(Riemann)
library(Riemann)
exit
q()
install.packages("hydra")
library(hydra)
data(karate)
help(hydra)
embedding <- hydra(karate$distance)
plot(embedding,labels=karate$label,lab.col=karate$group,graph.adj=karate$adjacency)
warnings()
warnings()
plot(embedding,labels=karate$label,lab.col=karate$group,graph.adj=karate$adjacency)
install.packages("phateR")
library(Riemann)
## IN-CODE TEST
true.mu  = c(1,0,0,0,0)
true.lbd = 0.1
## GENERATE DATA N=1000
small.data = rspnorm(1000, true.mu, true.lbd)
## COMPARE FOUR METHODS
test1 = mle.splaplace(small.data, method="Optimize")
test2 = mle.splaplace(small.data, method="DE")
test3 = mle.splaplace(small.data, method="Newton", use.exact=FALSE)
test4 = mle.splaplace(small.data, method="Newton", use.exact=TRUE)
test3
test4
test3
test4
## IN-CODE TEST
true.mu  = c(1,0,0,0,0)
true.lbd = 0.01
## GENERATE DATA N=1000
small.data = rspnorm(1000, true.mu, true.lbd)
## COMPARE FOUR METHODS
test1 = mle.splaplace(small.data, method="Optimize")
test2 = mle.splaplace(small.data, method="DE")
test3 = mle.splaplace(small.data, method="Newton", use.exact=FALSE)
test4 = mle.splaplace(small.data, method="Newton", use.exact=TRUE)
test1
test2
test3
test4
rm(list=ls())
library(Riemann)
vecr = rep(0.1, 10)
sum(vecr*log(vecr))
veck = rep(0.2, 5)
-sum(veck*log(veck))
-sum(veck*log(veck))*2
vec_r = rep(0.1, 10)
fun_split <- function(data, s){
data1 = data[1:s]
data2 = data[(s+1):length(data)]
data1 = data1/sum(data1)
data2 = data2/sum(data2)
term1 = -sum(data1*log(data1))
term2 = -sum(data2*log(data2))
w1 = s/length(data)
w2 = 1-w1
return(w1*term1 + w2*term2)
}
vec_r = rep(0.1, 10)
fun_split <- function(data, s){
data1 = data[1:s]
data2 = data[(s+1):length(data)]
data1 = data1/sum(data1)
data2 = data2/sum(data2)
term1 = -sum(data1*log(data1))
term2 = -sum(data2*log(data2))
w1 = s/length(data)
w2 = 1-w1
return(w1*term1 + w2*term2)
}
vec_seps = 1:9
vec_vals = rep(0, 9)
for (i in 1:9){
vec_vals[i] = fun_split(vec_r, i)
}
plot(vec_seps, vec_vals, "b")
abline(h=-sum(vec_r * sum(vec_r)), col="red")
-sum(vec_r * sum(vec_r))
-sum(vec_r * log(vec_r))
abline(h=-sum(vec_r *log(vec_r)), col="red")
vec_r = rep(0.1, 10)
fun_split <- function(data, s){
data1 = data[1:s]
data2 = data[(s+1):length(data)]
data1 = data1/sum(data1)
data2 = data2/sum(data2)
term1 = -sum(data1*log(data1))
term2 = -sum(data2*log(data2))
w1 = s/length(data)
w2 = 1-w1
return(w1*term1 + w2*term2)
}
vec_seps = 1:9
vec_vals = rep(0, 9)
for (i in 1:9){
vec_vals[i] = fun_split(vec_r, i)
}
plot(vec_seps, vec_vals, "b", ylim=c(0,4))
abline(h=-sum(vec_r *log(vec_r)), col="red")
plot(vec_seps, vec_vals, "b", ylim=c(1,3))
abline(h=-sum(vec_r *log(vec_r)), col="red")
library(Riemann)
library(Riemann)
library(Riemann)
install.packages("usmap")
library(Riemann)
library(Riemann)
#                 FITTING THE MODEL
# ---------------------------------------------------- #
# Load the 'city' data and wrap as 'riemobj'
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
# Fit the model with different numbers of clusters
k2 = moSL(locations, k=2)
k3 = moSL(locations, k=3)
k4 = moSL(locations, k=4)
# Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster, pch=19, main="K=2")
plot(embed2, col=k3$cluster, pch=19, main="K=3")
plot(embed2, col=k4$cluster, pch=19, main="K=4")
par(opar)
# ---------------------------------------------------- #
#                   USE S3 METHODS
# ---------------------------------------------------- #
# Use the same 'locations' data as new data
# (1) log-likelihood
newloglkd = round(loglkd(k3, locations), 3)
print(paste0("Log-likelihood for K=3 model fit : ", newloglkd))
# (2) label
newlabel = label(k3, locations)
# (3) density
newdensity = density(k3, locations)
k3$criteria
k3$loglkd
k3
library(Riemann)
library(Riemann)
newloglkd = round(loglkd(k3, locations), 3)
print(paste0("Log-likelihood for K=3 model fit : ", newloglkd))
# (2) label
newlabel = label(k3, locations)
# (3) density
newdensity = density(k3, locations)
newlabel-k3$cluster
newdensity
rm(list=ls())
library(Riemann)
library(Riemann)
library(Riemann)
install.packages("dtw")
library(Riemann)
devtools::load_all(".")
covr::codecov()
warnings()
library(Riemann)
covr::codecov()
warnings()
usethis::use_testthat()
use_test("wrappers")
usethis::use_test("wrappers")
data_sphere = array(0,c(5,3))
for (i in 1:5){
tgt = stats::rnorm(3)
data_sphere[i,] = tgt/sqrt(sum(tgt^2))
}
riem01 = Riemann::wrap.sphere(data_sphere)
class(riem01)
expect_equal(class(riem03), "riemdata")
## 12landmark
zz = data("gorilla", package="Riemann")
zz
data("gorilla", package="Riemann")
riem12 = Riemann::wrap.landmark(gorilla)
zz$rm(list=ls())
library(Riemann)
covr::package_coverage()
covr::package_coverage()
library(Riemann)
covr::codecov()
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
help(rnorm)
help(rspnorm)
library(Riemann)
rsplaplace(10, c(0,0,1), 0.5)
rsplaplace(10, c(0,0,1), 0.5)
rsplaplace(10, c(0,0,1), 0.5)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
rsplaplace(10, c(0,0,1), 0.01)
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
help(wrap.sphere)
install.packages("tmap", dependencies = TRUE)
library(Riemann)
library(sp)
library(spdep)
library(tmp)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- moran.mc(s$HR80, lw, nsim=9999, alternative="greater")
plot(M1)
s$HR80
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.riem$size
dat.riem$name
dat.riem$data
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
dat.W
# run my moran
run_mine = riem.gmoranI(dat.riem, dat.W, ntest=9999)
library(Riemann)
library(sp)
library(spdep)
library(tmp)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- moran.mc(s$HR80, lw, nsim=9999, alternative="greater")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.gmoranI(dat.riem, dat.W, ntest=9999)
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
rm(list=ls())
graphics.off()
## personal test : comparison against the example from 'tmap' vignette.
## source - https://mgimond.github.io/simple_moransI_example/
library(sp)
library(spdep)
library(tmp)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- moran.mc(s$HR80, lw, nsim=9999, alternative="greater")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.gmoranI(dat.riem, dat.W, ntest=9999)
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
help("moran.mc")
M1$p.value
sum(run_mine$statistic <= run_mine$permuted)/length(run_mine$permuted)
M1$alternative
M1$method
M1$res
M1$parameter
sum(run_mine$statistic <= run_mine$permuted)/length(run_mine$permuted)
rm(list=ls())
library(Riemann)
#
## personal test : comparison against the example from 'tmap' vignette.
## source - https://mgimond.github.io/simple_moransI_example/
library(sp)
library(spdep)
library(tmp)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- moran.mc(s$HR80, lw, nsim=9999, alternative="greater")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.gmoranI(dat.riem, dat.W, ntest=9999, alternative="greater")
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
M1$p.value
run_mine$p.value
# Run the MC simulation version of the Moran's I test
M1 <- moran.mc(s$HR80, lw, nsim=9999, alternative="less")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.gmoranI(dat.riem, dat.W, ntest=9999, alternative="less")
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
M1$p.value
run_mine$p.value
library(Riemann)
library(sp)
library(spdep)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- geary.mc(s$HR80, lw, nsim=9999, alternative="less")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.geary(dat.riem, dat.W, ntest=9999, alternative="less")
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
graphics.off()
moran.mc()
plot(M1)
## personal test : comparison against the example from 'tmap' vignette.
## source - https://mgimond.github.io/simple_moransI_example/
library(sp)
library(spdep)
library(tmap)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- moran.mc(s$HR80, lw, nsim=9999, alternative="less")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.moran(dat.riem, dat.W, ntest=9999, alternative="less")
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
M1$statistic
run_mine$statistic
rm(list=ls())
graphics.off()
library(Riemann)
# personal test : using the same data from 'tmap' vignette
library(sp)
library(spdep)
# read the data
s <- readRDS(url("https://github.com/mgimond/Data/raw/gh-pages/Exercises/fl_hr80.rds"))
# Define the neighbors (use queen case)
nb <- poly2nb(s, queen=TRUE)
# Compute the neighboring average homicide rates
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# Run the MC simulation version of the Moran's I test
M1 <- geary.mc(s$HR80, lw, nsim=9999, alternative="less")
# my way
dat.euc = list()
for (i in 1:length(s$HR80)){
dat.euc[[i]] = s$HR80[i]
}
dat.riem = wrap.euclidean(dat.euc)
dat.W    = nb2mat(nb, zero.policy = TRUE, style="W")
# run my moran
run_mine = riem.geary(dat.riem, dat.W, ntest=9999, alternative="less")
run_mine$statistic
run_mine$permuted
# run my moran
run_mine = riem.geary(dat.riem, dat.W, ntest=9999, alternative="less")
# visualize
par(mfrow=c(1,2))
plot(M1)
kdmine = density.default(run_mine$permuted)
plot(kdmine)
abline(v=run_mine$statistic, lwd=2, col="red")
rm(list=ls())
graphics.off()
help(riem.geary)
library(Riemann)
library(Riemann)
library(rpart)
data("car.test.frame")
help(post.rpart)
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
post(z.auto, file = "")   # display tree on active device
# now construct postscript version on file "pretty.ps"
# with no title
post(z.auto, file = "pretty.ps", title = " ")
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
fit
help(predict.rpart)
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
predict(z.auto)
sub <- c(sample(1:50, 25), sample(51:100, 25), sample(101:150, 25))
fit <- rpart(Species ~ ., data = iris, subset = sub)
fit
table(predict(fit, iris[-sub,], type = "class"), iris[-sub, "Species"])
zz = predict(fit, type = "prob")   # class probabilities (default)
zz
z.auto$frame
z.auto$y
z.auto$where
z.auto$frame
z.auto$frame$yval
z.auto$where
names(z.auto)
z.auto$where
names(z.auto$where)
car.test.frame
z.auto$frame
unique(z.auto$where)
