}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete..))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete..))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete..))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete..))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete..))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
help(par)
library(Riemann)
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete..))
}
}
}
}
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete.."))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
if (i%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete.."))
}
}
niter = 10000
distn = rep(0,niter)
for (i in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[i] = riem.wasserstein(myriem1, myriem2)$distance
print(paste0("iteration ",i,"/",niter," complete.."))
}
niter = 10000
distn = rep(0,niter)
for (it in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[it] = riem.wasserstein(myriem1, myriem2)$distance
if (it%%100 == 0){
print(paste0("iteration ",i,"/",niter," complete.."))
}
}
niter = 10000
distn = rep(0,niter)
for (it in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[it] = riem.wasserstein(myriem1, myriem2)$distance
if (it%%100 == 0){
print(paste0("iteration ",it,"/",niter," complete.."))
}
}
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
par(opar)
help(abline)
hist(distn, main="Monte Carlo Distribution")
abline(v=pi/2, lwd=2, col="red")
rm(list=ls())
library(Riemann)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
## COMPUTE p-WASSERSTEIN DISTANCES
dist1 = riem.wasserstein(myriem1, myriem2, p=1)
dist2 = riem.wasserstein(myriem1, myriem2, p=2)
dist5 = riem.wasserstein(myriem1, myriem2, p=5)
pm1 = paste0("p=1: distance=",dist1$distance)
pm2 = paste0("p=2: distance=",dist2$distance)
pm5 = paste0("p=5: distance=",dist5$distance)
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
## COMPUTE p-WASSERSTEIN DISTANCES
dist1 = riem.wasserstein(myriem1, myriem2, p=1)
dist2 = riem.wasserstein(myriem1, myriem2, p=2)
dist5 = riem.wasserstein(myriem1, myriem2, p=5)
pm1 = paste0("p=1: distance=",dist1$distance)
pm2 = paste0("p=2: distance=",dist2$distance)
pm5 = paste0("p=5: distance=",dist5$distance)
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
## COMPUTE p-WASSERSTEIN DISTANCES
dist1 = riem.wasserstein(myriem1, myriem2, p=1)
dist2 = riem.wasserstein(myriem1, myriem2, p=2)
dist5 = riem.wasserstein(myriem1, myriem2, p=5)
pm1 = paste0("p=1: distance=",dist1$distance)
pm2 = paste0("p=2: distance=",dist2$distance)
pm5 = paste0("p=5: distance=",dist5$distance)
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
## COMPUTE p-WASSERSTEIN DISTANCES
dist1 = riem.wasserstein(myriem1, myriem2, p=1)
dist2 = riem.wasserstein(myriem1, myriem2, p=2)
dist5 = riem.wasserstein(myriem1, myriem2, p=5)
pm1 = paste0("p=1: distance=",dist1$distance)
pm2 = paste0("p=2: distance=",dist2$distance)
pm5 = paste0("p=5: distance=",dist5$distance)
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
## COMPUTE p-WASSERSTEIN DISTANCES
dist1 = riem.wasserstein(myriem1, myriem2, p=1)
dist2 = riem.wasserstein(myriem1, myriem2, p=2)
dist5 = riem.wasserstein(myriem1, myriem2, p=5)
pm1 = paste0("p=1: distance=",dist1$distance)
pm2 = paste0("p=2: distance=",dist2$distance)
pm5 = paste0("p=5: distance=",dist5$distance)
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
## COMPUTE p-WASSERSTEIN DISTANCES
dist1 = riem.wasserstein(myriem1, myriem2, p=1)
dist2 = riem.wasserstein(myriem1, myriem2, p=2)
dist5 = riem.wasserstein(myriem1, myriem2, p=5)
pm1 = paste0("p=1: distance=",dist1$distance)
pm2 = paste0("p=2: distance=",dist2$distance)
pm5 = paste0("p=5: distance=",dist5$distance)
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
rowSums(dist1$plan)
pm1 = paste0("p=1: distance=",round(dist1$distance,5))
pm2 = paste0("p=2: distance=",round(dist2$distance,5))
pm5 = paste0("p=5: distance=",round(dist5$distance,5))
## VISUALIZE
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3))
image(dist1$plan, axes=FALSE, main=pm1)
image(dist2$plan, axes=FALSE, main=pm2)
image(dist5$plan, axes=FALSE, main=pm5)
par(opar)
niter = 10000
distn = rep(0,niter)
for (it in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:30){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[it] = riem.wasserstein(myriem1, myriem2)$distance
if (it%%100 == 0){
print(paste0("iteration ",it,"/",niter," complete.."))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
abline(v=pi/2, lwd=2, col="red")
par(opar)
library(Riemann)
library(Riemann)
library(Riemann)
pack <- "Riemann"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(Riemann)
library(Riemann)
pack <- "Riemann"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
rm(list=ls())
library(Riemann)
pack <- "Riemann"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
rm(list=ls())
library(Riemann)
pkgdown::build_site()
help(interactive)
library(Riemann)
pkgdown::build_site()
## WANT TO SEE CONCENTRATION OF EMPIRICAL DISTANCE FOR
## TWO EMPIRICAL MEASURES : EXPECTED DISTANCE IS "pi/2"
niter = 10000
distn = rep(0,niter)
for (it in 1:niter){
mydata1 = list()
mydata2 = list()
for (i in 1:30){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:30){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1  = wrap.sphere(mydata1)
myriem2  = wrap.sphere(mydata2)
distn[it] = riem.wasserstein(myriem1, myriem2)$distance
if (it%%100 == 0){
print(paste0("iteration ",it,"/",niter," complete.."))
}
}
# Visualize
opar <- par(no.readonly=TRUE)
hist(distn, main="Monte Carlo Distribution")
abline(v=pi/2, lwd=2, col="red")
par(opar)
library(Riemann)
library(Riemann)
pkgdown::build_site()
