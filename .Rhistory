k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
install.packages("movMF")
??movMF
hey = movMF::movMF(locations, k=2)
hey$theta
hey$alpha
hey$L
hey$P
hey$ll
hey$details
hey$alpha
set.seed(123)
y2 <- movMF(x, 2, nruns = 10)
predict(hey, locations)
k2 = predict(movMF::movMF(locations, k=2), locations)
k3 = predict(movMF::movMF(locations, k=3), locations)
k5 = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2 = predict(movMF::movMF(locations, k=2), locations)
k3 = predict(movMF::movMF(locations, k=3), locations)
k5 = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2 = predict(movMF::movMF(locations, k=2), locations)
k3 = predict(movMF::movMF(locations, k=3), locations)
k5 = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2 = predict(movMF::movMF(locations, k=2), locations)
k3 = predict(movMF::movMF(locations, k=3), locations)
k5 = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2 = predict(movMF::movMF(locations, k=2), locations)
k3 = predict(movMF::movMF(locations, k=3), locations)
k5 = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(1,3))
plot(embed2, col=k2)
plot(embed2, col=k3)
plot(embed2, col=k5)
x = list()
x[[1]] = 1
x[[2]] = 2
x[[3]] = 3
x[[4]] = 4
x[c(1,3)]
A = matrix(rnorm(4*2), ncol=2)
B = matrix(rnorm(4*2), ncol=2)
A*B
base::sum(A*B)
x = c(1,2,3,4)
diag(x)
base::diag(x)
x = abs(matrix(rnorm(10*3), ncol=3))
x
for (i in 1:10){tgt=x[i,]; x[i,] = tgt/sum(tgt)}
colSums(x)/10
sum(colSums(x)/10)
help(which.max)
xx = c(2,3,4,2,4)
which.max(xx)
library(Riemann)
library(Riemann)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
rm(list=ls())
graphics.off()
library(Riemann)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
library(Riemann)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
library(Riemann)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster)
plot(embed2, col=k3$cluster)
plot(embed2, col=k5$cluster)
library(Riemann)
data(cities)
locations = cities$cartesian
embed2 = riem.mds(wrap.sphere(locations), ndim=2)$embed
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster, pch=19)
plot(embed2, col=k3$cluster, pch=19)
plot(embed2, col=k5$cluster, pch=19)
library(Riemann)
locations = cities$cartesian
dim(locations)
# # ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
## CLUSTERING
k2 = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3 = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5 = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
par(mfrow=c(1,3))
plot(embed2, col=k2$cluster, pch=19)
plot(embed2, col=k3$cluster, pch=19)
plot(embed2, col=k5$cluster, pch=19)
plot(t(embed2), col=k2$cluster, pch=19)
plot(embed2, col=k2$cluster, pch=19)
embed2 = embed2%*%cbind(c(cos(pi/2), sin(pi/2)), c(sin(pi/2), -cos(pi/2)))
plot(embed2, col=k2$cluster, pch=19)
plot(embed2, col=k3$cluster, pch=19)
plot(embed2, col=k5$cluster, pch=19)
# # ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3int = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5int = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2ext = predict(movMF::movMF(locations, k=2), locations)
k3ext = predict(movMF::movMF(locations, k=3), locations)
k5ext = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k2ext, pch=19)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k3ext, pch=19)
plot(embed2, col=k5ext, pch=19)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k3ext, pch=19)
plot(embed2, col=k5ext, pch=19)
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3int = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5int = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2ext = predict(movMF::movMF(locations, k=2), locations)
k3ext = predict(movMF::movMF(locations, k=3), locations)
k5ext = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k3ext, pch=19)
plot(embed2, col=k5ext, pch=19)
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE)
k3int = sphere.mixnorm(locations, k=3, same.lambda = TRUE)
k5int = sphere.mixnorm(locations, k=5, same.lambda = TRUE)
k2ext = predict(movMF::movMF(locations, k=2), locations)
k3ext = predict(movMF::movMF(locations, k=3), locations)
k5ext = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k3ext, pch=19)
plot(embed2, col=k5ext, pch=19)
4%5
4%%5
library(Riemann)
x=c(1,2,3)
names(x)=c("a","b","c")
x
library(Riemann)
library(Riemann)
library(Riemann)
library(Riemann)
# # ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE, printer=TRUE)
library(Riemann)
# ## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE, printer=TRUE)
k3int = sphere.mixnorm(locations, k=3, same.lambda = TRUE, printer=TRUE)
k5int = sphere.mixnorm(locations, k=5, same.lambda = TRUE, printer=TRUE)
k2ext = predict(movMF::movMF(locations, k=2), locations)
k3ext = predict(movMF::movMF(locations, k=3), locations)
k5ext = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k3ext, pch=19)
plot(embed2, col=k5ext, pch=19)
library(Riemann)
## LOAD THE DATA AND WRAP AS RIEMOBJ
data(cities)
locations = cities$cartesian
embed2    = array(0,c(60,2))
for (i in 1:60){
embed2[i,] = sphere.xyz2geo(locations[i,])
}
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE, printer=TRUE)
## CLUSTERING
k2int = sphere.mixnorm(locations, k=2, same.lambda = TRUE, printer=TRUE)
k3int = sphere.mixnorm(locations, k=3, same.lambda = TRUE, printer=TRUE)
k5int = sphere.mixnorm(locations, k=5, same.lambda = TRUE, printer=TRUE)
k2ext = predict(movMF::movMF(locations, k=2), locations)
k3ext = predict(movMF::movMF(locations, k=3), locations)
k5ext = predict(movMF::movMF(locations, k=5), locations)
par(mfrow=c(2,3))
plot(embed2, col=k2int$cluster, pch=19)
plot(embed2, col=k3int$cluster, pch=19)
plot(embed2, col=k5int$cluster, pch=19)
plot(embed2, col=k2ext, pch=19)
plot(embed2, col=k3ext, pch=19)
plot(embed2, col=k5ext, pch=19)
library(Riemann)
install.packages(c("RiemBase","T4transport","DEoptim","ggrepel"))
