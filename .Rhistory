}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
ndata  = 200
class1 = list()
class2 = list()
class3 = list()
class4 = list()
for (i in 1:ndata){
tmpxy = matrix(rnorm(4*2, sd=0.1), ncol=2)
tmpz  = rep(1,4)
tmp3d = cbind(tmpxy, tmpz)
tmp  = tmp3d/sqrt(rowSums(tmp3d^2))
class1[[i]] = tmp[1,]
class2[[i]] = tmp[2,]
class3[[i]] = tmp[3,]
class4[[i]] = tmp[4,]
}
obj1 = wrap.sphere(class1)
obj2 = wrap.sphere(class2)
obj3 = wrap.sphere(class3)
obj4 = wrap.sphere(class4)
## RUN THE ASYMPTOTIC TEST
riem.fanova(obj1, obj2, obj3, obj4)
??eqdist.2014BG
# class 2 : 30 perturbed data points near (0,1,0) on S^2 in R^3
#-------------------------------------------------------------------
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2wass(myriem1, myriem2, nperm=999, use.smooth=FALSE)
library(Riemann)
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2bg(myriem1, myriem2, nperm=999, use.smooth=FALSE)
library(Riemann)
riem.test2bg(myriem1, myriem2, nperm=999)
library(Riemann)
riem.test2bg(myriem1, myriem2, nperm=999)
rm(list=ls())
library(Riemann)
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2bg(myriem1, myriem2, nperm=999)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2bg(myriem1, myriem2, nperm=999)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2bg(myriem1, myriem2, nperm=999)
## GENERATE DATA
mydata1 = list()
mydata2 = list()
for (i in 1:20){
tgt = c(1, stats::rnorm(2, sd=0.1))
mydata1[[i]] = tgt/sqrt(sum(tgt^2))
}
for (i in 1:20){
tgt = c(rnorm(1,sd=0.1),1,rnorm(1,sd=0.1))
mydata2[[i]] = tgt/sqrt(sum(tgt^2))
}
myriem1 = wrap.sphere(mydata1)
myriem2 = wrap.sphere(mydata2)
riem.test2bg(myriem1, myriem2, nperm=999)
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
X
dim(X)
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Y = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Xnorm = X/sqrt(rowSums(X^2))
Ynorm = Y/sqrt(rowSums(Y^2))
Xriem = wrap.sphere(Xnorm)
Yriem = wrap.sphere(Ynorm)
riem.test2bg(Xriem, Yriem, nperm=999)$p.value
## CHECK WITH EMPIRICAL TYPE-1 ERROR
set.seed(777)
ntest = 1000
pvals = rep(0,ntest)
for (i in 1:ntest){
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Y = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Xnorm = X/sqrt(rowSums(X^2))
Ynorm = Y/sqrt(rowSums(Y^2))
Xriem = wrap.sphere(Xnorm)
Yriem = wrap.sphere(Ynorm)
pvals[i] = riem.test2bg(Xriem, Yriem, nperm=999)$p.value
}
cat(paste0("* EMPIRICAL TYPE-1 ERROR=", round(sum(pvals/ntest),5)))
emperr = round(sum((pvals <= 0.05))/ntest, 5)
cat(paste0("* EMPIRICAL TYPE-1 ERROR=", emperr))
emperr = round(sum((pvals <= 0.05))/ntest, 5)
cat(paste0("* EMPIRICAL TYPE-1 ERROR=", emperr))
library(Riemann)
library(Riemann)
help("riem.test2bg")
library(Riemann)
## CHECK WITH EMPIRICAL TYPE-1 ERROR
set.seed(777)
ntest = 1000
pvals = rep(0,ntest)
for (i in 1:ntest){
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Y = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Xnorm = X/sqrt(rowSums(X^2))
Ynorm = Y/sqrt(rowSums(Y^2))
Xriem = wrap.sphere(Xnorm)
Yriem = wrap.sphere(Ynorm)
pvals[i] = riem.test2wass(Xriem, Yriem, nperm=999)$p.value
print(paste0("iteration ",i,"/",ntest," complete..)
}
emperr = round(sum((pvals <= 0.05))/ntest, 5)
print(paste0("* EMPIRICAL TYPE-1 ERROR=", emperr))
## CHECK WITH EMPIRICAL TYPE-1 ERROR
set.seed(777)
ntest = 1000
pvals = rep(0,ntest)
for (i in 1:ntest){
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Y = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Xnorm = X/sqrt(rowSums(X^2))
Ynorm = Y/sqrt(rowSums(Y^2))
Xriem = wrap.sphere(Xnorm)
Yriem = wrap.sphere(Ynorm)
pvals[i] = riem.test2wass(Xriem, Yriem, nperm=999)$p.value
print(paste0("iteration ",i,"/",ntest," complete..))
}
emperr = round(sum((pvals <= 0.05))/ntest, 5)
print(paste0("* EMPIRICAL TYPE-1 ERROR=", emperr))
set.seed(777)
ntest = 1000
pvals = rep(0,ntest)
set.seed(777)
ntest = 1000
pvals = rep(0,ntest)
for (i in 1:ntest){
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Y = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Xnorm = X/sqrt(rowSums(X^2))
Ynorm = Y/sqrt(rowSums(Y^2))
Xriem = wrap.sphere(Xnorm)
Yriem = wrap.sphere(Ynorm)
pvals[i] = riem.test2wass(Xriem, Yriem, nperm=999)$p.value
print(paste0("iteration ",i,"/",ntest," complete.."))
}
emperr = round(sum((pvals <= 0.05))/ntest, 5)
print(paste0("* EMPIRICAL TYPE-1 ERROR=", emperr))
library(Riemann)
pkgdown::build_site()
pkgdown::build_site()
library(Riemann)
set.seed(777)
ntest = 1000
pvals.a = rep(0,ntest)
pvals.p = rep(0,ntest)
for (i in 1:ntest){
X = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Y = cbind(matrix(rnorm(30*2, sd=0.1),ncol=2), rep(1,30))
Xnorm = X/sqrt(rowSums(X^2))
Ynorm = Y/sqrt(rowSums(Y^2))
Xriem = wrap.sphere(Xnorm)
Yriem = wrap.sphere(Ynorm)
pvals.a[i] = riem.fanova(Xriem, Yriem)$p.value
pvals.p[i] = riem.fanovaP(Xriem, Yriem, nperm=999)$p.value
print(paste0("iteration ",i,"/",ntest," complete.."))
}
emperr = round(sum((pvals <= 0.05))/ntest, 5)
print(paste0("* EMPIRICAL TYPE-1 ERROR=", emperr))
round(sum((pvals.a <= 0.05))/ntest, 5)
round(sum((pvals.p <= 0.05))/ntest, 5)
round(sum((pvals.a >= 0.95))/ntest, 5)
#   Xnorm = X/sqrt(rowSums(X^2))
#   Ynorm = Y/sqrt(rowSums(Y^2))
#
#   Xriem = wrap.sphere(Xnorm)
#   Yriem = wrap.sphere(Ynorm)
#   pvals.a[i] = riem.fanova(Xriem, Yriem)$p.value
#   pvals.p[i] = riem.fanovaP(Xriem, Yriem, nperm=999)$p.value
#   print(paste0("iteration ",i,"/",ntest," complete.."))
# }
#
round(sum((pvals.a <= 0.05))/ntest, 5) # asymptotic theory is nice
#   Xnorm = X/sqrt(rowSums(X^2))
#   Ynorm = Y/sqrt(rowSums(Y^2))
#
#   Xriem = wrap.sphere(Xnorm)
#   Yriem = wrap.sphere(Ynorm)
#   pvals.a[i] = riem.fanova(Xriem, Yriem)$p.value
#   pvals.p[i] = riem.fanovaP(Xriem, Yriem, nperm=999)$p.value
#   print(paste0("iteration ",i,"/",ntest," complete.."))
# }
#
round(sum((pvals.a <= 0.05))/ntest, 5) # asymptotic theory is nice
round(sum((pvals.p <= 0.05))/ntest, 5) # but PERMUTATION SEEMS TO WORK BETTER!
rm(list=ls())
#   Ynorm = Y/sqrt(rowSums(Y^2))
#
#   Xriem = wrap.sphere(Xnorm)
#   Yriem = wrap.sphere(Ynorm)
#   pvals.a[i] = riem.fanova(Xriem, Yriem)$p.value
#   pvals.p[i] = riem.fanovaP(Xriem, Yriem, nperm=999)$p.value
#   print(paste0("iteration ",i,"/",ntest," complete.."))
# }
#
# round(sum((pvals.a <= 0.05))/ntest, 5) # asymptotic the
