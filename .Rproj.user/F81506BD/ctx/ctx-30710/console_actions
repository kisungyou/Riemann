{
    "type": [
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#                 Checker for Two Types of Inputs",
        "> ",
        "#",
        "> ",
        "#  Generate 5 observations; empirical covariance of normal observations.",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#  Data Generation",
        "> ",
        "d1 = array(0,c(3,3,5))",
        "> ",
        "d2 = list()",
        "> ",
        "for (i in 1:5){",
        "+ ",
        "  dat = matrix(rnorm(10*3),ncol=3)",
        "+ ",
        "  d1[,,i] = stats::cov(dat)",
        "+ ",
        "  d2[[i]] = d1[,,i]",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#  Run",
        "> ",
        "test1 = wrap.spd(d1)",
        "Error in mat_rank(x) : could not find function \"mat_rank\"\n",
        "> ",
        "test2 = wrap.spd(d2)",
        "Error in mat_rank(x) : could not find function \"mat_rank\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#                 Checker for Two Types of Inputs",
        "> ",
        "#",
        "> ",
        "#  Generate 5 observations; empirical covariance of normal observations.",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#  Data Generation",
        "> ",
        "d1 = array(0,c(3,3,5))",
        "> ",
        "d2 = list()",
        "> ",
        "for (i in 1:5){",
        "+ ",
        "  dat = matrix(rnorm(10*3),ncol=3)",
        "+ ",
        "  d1[,,i] = stats::cov(dat)",
        "+ ",
        "  d2[[i]] = d1[,,i]",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#  Run",
        "> ",
        "test1 = wrap.spd(d1)",
        "> ",
        "test2 = wrap.spd(d2)",
        "> ",
        "test1",
        "$data\n$data[[1]]\n           [,1]       [,2]        [,3]\n[1,] 1.70265388  0.6285654  0.04599627\n[2,] 0.62856537  1.5669933 -0.68384298\n[3,] 0.04599627 -0.6838430  0.92508976\n\n$data[[2]]\n           [,1]       [,2]      [,3]\n[1,] 0.59300104 0.05769322 0.3415135\n[2,] 0.05769322 0.70524503 0.3929699\n[3,] 0.34151350 0.39296993 0.6134592\n\n$data[[3]]\n           [,1]       [,2]        [,3]\n[1,] 0.58905759  0.3432720  0.09851907\n[2,] 0.34327199  0.9365327 -0.20886180\n[3,] 0.09851907 -0.2088618  0.94636910\n\n$data[[4]]\n",
        "           [,1]      [,2]       [,3]\n[1,]  1.8498448 0.6416873 -0.5661388\n[2,]  0.6416873 1.6977006  0.1817662\n[3,] -0.5661388 0.1817662  2.4523774\n\n$data[[5]]\n           [,1]       [,2]       [,3]\n[1,]  0.9062766  0.6168325 -0.4154496\n[2,]  0.6168325  1.4587769 -1.1869208\n[3,] -0.4154496 -1.1869208  2.1027581\n\n\n$size\n[1] 3 3\n\n$name\n[1] \"spd\"\n\nattr(,\"class\")\n[1] \"riemdata\"\n",
        "> ",
        "test2",
        "$data\n$data[[1]]\n           [,1]       [,2]        [,3]\n[1,] 1.70265388  0.6285654  0.04599627\n[2,] 0.62856537  1.5669933 -0.68384298\n[3,] 0.04599627 -0.6838430  0.92508976\n\n$data[[2]]\n           [,1]       [,2]      [,3]\n[1,] 0.59300104 0.05769322 0.3415135\n[2,] 0.05769322 0.70524503 0.3929699\n[3,] 0.34151350 0.39296993 0.6134592\n\n$data[[3]]\n           [,1]       [,2]        [,3]\n[1,] 0.58905759  0.3432720  0.09851907\n[2,] 0.34327199  0.9365327 -0.20886180\n[3,] 0.09851907 -0.2088618  0.94636910\n\n$data[[4]]\n",
        "           [,1]      [,2]       [,3]\n[1,]  1.8498448 0.6416873 -0.5661388\n[2,]  0.6416873 1.6977006  0.1817662\n[3,] -0.5661388 0.1817662  2.4523774\n\n$data[[5]]\n           [,1]       [,2]       [,3]\n[1,]  0.9062766  0.6168325 -0.4154496\n[2,]  0.6168325  1.4587769 -1.1869208\n[3,] -0.4154496 -1.1869208  2.1027581\n\n\n$size\n[1] 3 3\n\n$name\n[1] \"spd\"\n\nattr(,\"class\")\n[1] \"riemdata\"\n\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "pdist(mylist)",
        "Error in substitue(deparse(riemobj)) : \n  could not find function \"substitue\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "pdist(mylist)",
        "deparse(mylist)\n",
        "Error in pdist(mylist) : * pdist :\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "pdist(mylist)￣",
        "Error: unexpected input in \"pdist(mylist)￣\"\n",
        "> ",
        "pdist(mylist)",
        "[1] \"mylist\"\n",
        "Error in pdist(mylist) : * pdist :\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "pdist(mylist)",
        "Error in pdist(mylist) : \n  * pdist : input 'mylist' should be an object of 'riemdata' class.\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "myriem = wrap.sphere(mylist)",
        "> ",
        "pdist(myriem)",
        "         [,1]      [,2]     [,3]      [,4]     [,5]\n[1,] 0.000000 1.6371982 1.753380 2.0032120 2.567880\n[2,] 1.637198 0.0000000 2.568539 0.8719654 1.518081\n[3,] 1.753380 2.5685390 0.000000 2.1644833 1.352449\n[4,] 2.003212 0.8719654 2.164483 0.0000000 1.495951\n[5,] 2.567880 1.5180807 1.352449 1.4959509 0.000000\n\nRestarting R session...\n\n",
        "> ",
        "library(Riemann)",
        "> ",
        "## GENERATE DATA",
        "> ",
        "mydata = list()",
        "> ",
        "sdval  = 0.1",
        "> ",
        "for (i in 1:5){",
        "+ ",
        "  tgt = c(stats::rnorm(2, sd=sdval), 1)",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "for (i in 6:10){",
        "+ ",
        "  tgt = c(1, stats::rnorm(2, sd=sdval))",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "myriem = wrap.sphere(mydata)",
        "> ",
        "",
        "> ",
        "## COMPARE TWO DISTANCES",
        "> ",
        "dint = pdist(myriem, geometry=\"intrinsic\", as.dist=FALSE)",
        "> ",
        "dext = pdist(myriem, geometry=\"extrinsic\", as.dist=FALSE)",
        "> ",
        "",
        "> ",
        "## VISUALIZE",
        "> ",
        "opar = par(no.readonly=TRUE)",
        "> ",
        "par(mfrow=c(1,2), pty=\"s\")",
        "> ",
        "image(dint[,10:1], main=\"intrinsic\", axes=FALSE)",
        "> ",
        "image(dext[,10:1], main=\"extrinsic\", axes=FALSE)",
        "> ",
        "par(opar)",
        "> ",
        "## GENERATE DATA",
        "> ",
        "mydata = list()",
        "> ",
        "sdval  = 0.1",
        "> ",
        "for (i in 1:5){",
        "+ ",
        "  tgt = c(stats::rnorm(2, sd=sdval), 1)",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "for (i in 6:10){",
        "+ ",
        "  tgt = c(1, stats::rnorm(2, sd=sdval))",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "myriem = wrap.sphere(mydata)",
        "> ",
        "",
        "> ",
        "## COMPARE TWO DISTANCES",
        "> ",
        "dint = pdist(myriem, geometry=\"intrinsic\", as.dist=FALSE)",
        "> ",
        "dext = pdist(myriem, geometry=\"extrinsic\", as.dist=FALSE)",
        "> ",
        "",
        "> ",
        "## VISUALIZE",
        "> ",
        "opar = par(no.readonly=TRUE)",
        "> ",
        "par(mfrow=c(1,2), pty=\"s\")",
        "> ",
        "image(dint[,10:1], main=\"intrinsic\", axes=FALSE)",
        "> ",
        "image(dext[,10:1], main=\"extrinsic\", axes=FALSE)",
        "> ",
        "par(opar)",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#          Example on Sphere : a dataset with two types",
        "> ",
        "#",
        "> ",
        "#  group1 : perturbed data points near (0,0,1) on S^2 in R^3",
        "> ",
        "#  group2 : perturbed data points near (1,0,0) on S^2 in R^3",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "## GENERATE DATA",
        "> ",
        "mydata = list()",
        "> ",
        "sdval  = 0.1",
        "> ",
        "for (i in 1:10){",
        "+ ",
        "  tgt = c(stats::rnorm(2, sd=sdval), 1)",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "for (i in 11:20){",
        "+ ",
        "  tgt = c(1, stats::rnorm(2, sd=sdval))",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "myriem = wrap.sphere(mydata)",
        "> ",
        "",
        "> ",
        "## COMPARE TWO DISTANCES",
        "> ",
        "dint = pdist(myriem, geometry=\"intrinsic\", as.dist=FALSE)",
        "> ",
        "dext = pdist(myriem, geometry=\"extrinsic\", as.dist=FALSE)",
        "> ",
        "",
        "> ",
        "## VISUALIZE",
        "> ",
        "opar = par(no.readonly=TRUE)",
        "> ",
        "par(mfrow=c(1,2), pty=\"s\")",
        "> ",
        "image(dint[,nrow(dint):1], main=\"intrinsic\", axes=FALSE)",
        "> ",
        "image(dext[,nrow(dext):1], main=\"extrinsic\", axes=FALSE)",
        "> ",
        "par(opar)",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#          Example on Sphere : a dataset with two types",
        "> ",
        "#",
        "> ",
        "#  group1 : perturbed data points near (0,0,1) on S^2 in R^3",
        "> ",
        "#  group2 : perturbed data points near (1,0,0) on S^2 in R^3",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "## GENERATE DATA",
        "> ",
        "mydata = list()",
        "> ",
        "sdval  = 0.1",
        "> ",
        "for (i in 1:10){",
        "+ ",
        "  tgt = c(stats::rnorm(2, sd=sdval), 1)",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "for (i in 11:20){",
        "+ ",
        "  tgt = c(1, stats::rnorm(2, sd=sdval))",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "myriem = wrap.sphere(mydata)",
        "> ",
        "",
        "> ",
        "## COMPARE TWO DISTANCES",
        "> ",
        "dint = pdist(myriem, geometry=\"intrinsic\", as.dist=FALSE)",
        "> ",
        "dext = pdist(myriem, geometry=\"extrinsic\", as.dist=FALSE)",
        "> ",
        "",
        "> ",
        "## VISUALIZE",
        "> ",
        "opar = par(no.readonly=TRUE)",
        "> ",
        "par(mfrow=c(1,2), pty=\"s\")",
        "> ",
        "image(dint[,nrow(dint):1], main=\"intrinsic\", axes=FALSE)",
        "> ",
        "image(dext[,nrow(dext):1], main=\"extrinsic\", axes=FALSE)",
        "> ",
        "par(opar)",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "#          Example on Sphere : a dataset with two types",
        "> ",
        "#",
        "> ",
        "#  group1 : perturbed data points near (0,0,1) on S^2 in R^3",
        "> ",
        "#  group2 : perturbed data points near (1,0,0) on S^2 in R^3",
        "> ",
        "#-------------------------------------------------------------------",
        "> ",
        "## GENERATE DATA",
        "> ",
        "mydata = list()",
        "> ",
        "sdval  = 0.1",
        "> ",
        "for (i in 1:10){",
        "+ ",
        "  tgt = c(stats::rnorm(2, sd=sdval), 1)",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "for (i in 11:20){",
        "+ ",
        "  tgt = c(1, stats::rnorm(2, sd=sdval))",
        "+ ",
        "  mydata[[i]] = tgt/sqrt(sum(tgt^2))",
        "+ ",
        "}",
        "> ",
        "myriem = wrap.sphere(mydata)",
        "> ",
        "",
        "> ",
        "## COMPARE TWO DISTANCES",
        "> ",
        "dint = pdist(myriem, geometry=\"intrinsic\", as.dist=FALSE)",
        "> ",
        "dext = pdist(myriem, geometry=\"extrinsic\", as.dist=FALSE)",
        "> ",
        "",
        "> ",
        "## VISUALIZE",
        "> ",
        "opar = par(no.readonly=TRUE)",
        "> ",
        "par(mfrow=c(1,2), pty=\"s\")",
        "> ",
        "image(dint[,nrow(dint):1], main=\"intrinsic\", axes=FALSE)",
        "> ",
        "image(dext[,nrow(dext):1], main=\"extrinsic\", axes=FALSE)",
        "> ",
        "par(opar)",
        "\nRestarting R session...\n\n"
    ]
}